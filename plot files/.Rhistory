options(digits=10)
fitcclme=lme(fixed=y~time*group,data=grpdata_cc,random=list(ID=pdSymm(~time)),control=lmeControl(retumObject=TRUE))
summary(fitcclme)
library(MASS)
library(geepack)
library(nlme)
library(psych)
library(Amelia)
library(boot)
options(digits=10)
reps = 5000
gee_beta_est = lme_beta_est = matrix(0, reps, 4)
lme_sigma_est = c(1:reps)
beta = c(25,-1,0,-1)
var.random = matrix(c(4,-0.1,-0.1,0.25), nrow=2)
sigma = 2
t = c(0,1,2,3,4)
set.seed(55555)
cc_matrix = mcar_matrix = mar_matrix = matrix(0,reps*6,nrow=reps,ncol=6)
for (i in 1:reps) {
if (i<=reps/2) grp = 0
if (i>((reps/2)+1)) grp = 1
vi = mvrnorm(n=1,mu=c(0,0),Sigma=var.random)
err = rnorm(n=5, mean=0, sd=sigma)
cc = beta[1]+beta[2]*t+beta[3]*grp+beta[4]*grp*t+vi[1]+vi[2]*t+err
row = c(grp,cc)
cc_matrix[i,] = row
mcar = cc
index = rbinom(5,1,0.50)
if(index[1]==0) mcar[1]=NA
if(index[2]==0) mcar[2]=NA
if(index[3]==0) mcar[3]=NA
if(index[4]==0) mcar[4]=NA
if(index[5]==0) mcar[5]=NA
row = c(grp,mcar)
mcar_matrix[i,] = row
mar = cc
if (mar[1]<23) mar[2:5]=NA
else {if(mar[2]<23) mar[3:5]=NA
else {if(mar[3]<23) mar[4:5]=NA
else {if(mar[4]<23) mar[5]=NA }}}
row = c(grp,mar)
mar_matrix[i,] = row
}
cc_df = data.frame(cc_matrix)
colnames(cc_df) <- c("group","time0","time1","time2","time3","time4")
head(cc_df)
var(cc_df)
cor(cc_df)
aggregate(time0~group, cc_df, mean)
aggregate(time1~group, cc_df, mean)
aggregate(time2~group, cc_df, mean)
aggregate(time3~group, cc_df, mean)
aggregate(time4~group, cc_df, mean)
mcar_df = data.frame(mcar_matrix)
colnames(mcar_df) <- c("group","time0","time1","time2","time3","time4")
mar_df = data.frame(mar_matrix)
colnames(mar_df) <- c("group","time0","time1","time2","time3","time4")
long_cc = reshape(cc_df, idvar="ID", varying=c("time0","time1","time2","time3","time4"), v.names="y", timevar="time",time=0:4, direction="long")
long_mcar = reshape(mcar_df, idvar="ID", varying=c("time0","time1","time2","time3","time4"), v.names="y", timevar="time",time=0:4, direction="long")
long_mar = reshape(mar_df, idvar="ID", varying=c("time0","time1","time2","time3","time4"), v.names="y", timevar="time",time=0:4, direction="long")
grpdata_cc = groupedData(y~time*group|ID,data=long_cc)
fitcclme=lme(fixed=y~time*group,data=grpdata_cc,random=list(ID=pdSymm(~time)),control=lmeControl(retumObject=TRUE))
summary(fitcclme)
ranef(fitcclme)
summary(fitcclme)
fitccgee = geeglm(y~time*group,data=long_cc,id=ID,family=gaussian("identity"),corstr="independence")
summary(fitccgee)
grpdata_mcar = groupedData(y~time*group|ID,data=long_mcar)
fitmcarlme=lme(fixed=y~time*group,data=grpdata_mcar,random=list(ID=pdSymm(~time)),na.action = "na.omit")
summary(fitmcarlme)
fitmcargee = geeglm(y~time*group,data=long_mcar,id=ID,family=gaussian("identity"),corstr="independence")
summary(fitmcargee)
grpdata_mar = groupedData(y~time*group|ID,data=long_mar)
fitmarlme=lme(fixed=y~time*group,data=grpdata_mar,random=list(ID=pdSymm(~time)),na.action = "na.omit")
summary(fitmarlme)
fitmargee = geeglm(y~time*group,data=long_mar,id=ID,family=gaussian("identity"),corstr="independence")
summary(fitmargee)
a.out <- amelia(long_mar, m = 5, ts = "time", cs="ID")
a.out
b.out<-NULL
se.out<-NULL
for(i in 1:a.out$m) {
fit.gee = geeglm(y~time*group,data=a.out$imputations[[i]],id=ID,family=gaussian("identity"),corstr="independence")
b.out <- rbind(b.out,fit.gee$coef)
se.out <- rbind(se.out, coef(summary(fit.gee))[,2])
}
b.out
se.out
help(tapply)
tapply(b.out,FUN=mean)
help(sapply)
tapply(b.out,FUN=mean)
colMeans(b.out, na.rm = FALSE, dims = 1)
a.out <- amelia(long_mar, m = 50, ts = "time", cs="ID")
a.out
b.out<-NULL
se.out<-NULL
for(i in 1:a.out$m) {
fit.gee = geeglm(y~time*group,data=a.out$imputations[[i]],id=ID,family=gaussian("identity"),corstr="independence")
b.out <- rbind(b.out,fit.gee$coef)
se.out <- rbind(se.out, coef(summary(fit.gee))[,2])
}
b.out
se.out
colMeans(b.out, na.rm = FALSE, dims = 1)
W = colMeans(se.out, na.rm = FALSE, dims = 1)
W
B = se.out - W
B
Wrep = rep(W,50)
Wrep
Wrep = matrix(rep(W,50),nrows=50,ncols=4)
help(matrix)
Wrep = matrix(rep(W,50),nrow=50,ncol=4)
Wrep
Wrep = matrix(rep(W,50),nrow=50,ncol=4,byrow=T)
Wrep
B = se.out - W
B
B = sum((se.out - W)^2)/49
B
B = ((se.out - W)^2)
B
B = colMeans((se.out - W)^2)
B
B = colMeans(((se.out - W)^2),na.rm = FALSE, dims = 1)
B
test = (se.out - W)^2)
test = (se.out - W)^2
test
mean(test[,1])
B = colMeans(((se.out - W)^2))/49
B
Bhatmean = colMeans(b.out, na.rm = FALSE, dims = 1)
B = colMeans(((Bhatmean - b.out)^2))/49
B
V = W + (1 + (1/49))*B
V
V = sqrt((W + (1 + (1/49))*B)
)
V = sqrt((W + (1 + (1/49))*B))
V
ranef(fitcclme)
summary(fitcclme)
help(rnorm)
x = runif(350,0,5)
x
factor(x)
x
x = runif(350,0,5)
y = rep(1,350)
y
both = cbind(x,y)
both
new[x >=0 & x < 1] = 1
help(trunc)
z = trunc(x)
z
both[,2]=trunc(both[,1])
both
both[,2]=trunc(both[,1])+1
both
tab(both[,2])
table(both[,2])
x = runif(10000,0,5)
group=trunc(x)+1
table(group)
x = runif(1000000,0,5)
group=trunc(x)+1
table(group)
library(psych)
x = matrix(0,350,3)
x
364/293
364/393
1700/2300
29.5/12
(6*2.46) + (1.5*2.46) + (2*2.46)
(6*2.46) + (1.2*2.46) + (1.6*2.46)
Y1 = c(1,2,3,4,5)
Y2 = c(4,4,4,5,6)
y = rbind(Y1,Y2)
y
C = matrix(c(1,3,5,4),2,2)
C
comb = C*y
var(y)
C = matrix(c(11,21,12,22),2,2)
C
t(C)
74.5/80.22
13.25/15
(9.75+13.25)/25
7104-1281
7104-1281-346
help(pdf)
help(density)
help(pnorm)
31/35
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 10000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
round(prop.table(table(age_bracket, success)),2)
plot(density(age[!success]), main="Age by Success", xlab="age")
lines(density(age[success]), lty=2)
legend('topright', c("Failure", "Success"), lty=c(1,2))
n <- 10
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
print(data)
cor(data)
n <- 100
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 1000
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
print(data)
cor(data)
n <- 100000
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
n <- 100000
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 1000000
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- -1.6
beta1 <- 0.03
x <- runif(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
help(rnorm)
n <- 10000000
beta0 <- -1.6
beta1 <- 0.03
x <- rnorm(n=n, min=18, max=60)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- -1.6
beta1 <- 0.03
x <- rnorm(n=n, mean=10, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 1000000
beta0 <- -1.6
beta1 <- 0.03
x <- rnorm(n=n, mean=10, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- -1.6
beta1 <- 0.03
x <- rnorm(n=n, mean=10, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- -1.6
beta1 <- 0.03
x <- rnorm(n=n, mean=100, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- 0
beta1 <- 0.2
x <- rnorm(n=n, mean=100, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- -.01
beta1 <- 0.2
x <- rnorm(n=n, mean=100, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
n <- 10000000
beta0 <- -1.6
beta1 <- 0.03
x <- rnorm(n=n, mean=100, sd=1)
pi_x <- exp(beta0 + beta1 * x) / (1 + exp(beta0 + beta1 * x))
y <- rbinom(n=length(x), size=1, prob=pi_x)
data <- data.frame(x, pi_x, y)
names(data) <- c("age", "pi", "y")
cor(data)
library(mvtBinaryEP)
help(ep)
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 10000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
View(u)
View(u)
cor(success,age)
age
age
success
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 100000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
cor(success,age)
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 10000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
cor(success,age)
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 100000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
cor(success,age)
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 1000000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
cor(success,age)
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
s = chol(sigma)
n = 10000000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
cor(success,age)
help(pnorm)
sqrt(5)
sqrt(5.19536)
8^9
9^8
8^9 > 9^8
8^8
14/46
17/50
f = function ()
{ S = rbinom(1,n,p) + (S-n*p)/sqrt(n*p*(1-p))
}
x = simple.sim(100,f)
qt(.05/2,28)
qt(.05/2,27)
qt(.05/2,29)
qt(.05/2,50)
qt(.05/2,49)
x = rnorm(1000000)
y = rnorm(1000000)
plot(x,y)
x = rnorm(10000)
y = rnorm(10000)
plot(x,y)
fit = lm(y~x)
abline(fit,lwd=3,col="red")
?(gl)
?gl()
x = rnorm(200)
y = rnorm(200) + rnorm(200)
plot(x,y,pch=18)
fit = lm(y~x)
abline(fit,lwd=3,col="red")
y = rnorm(200) + rnorm(200)
g = gl(2,100,labels=c("Males","Females"))
plot(x,y,type="n")
points(x[g=="Males"],y[g="Males"],col="blue")
tables(g)
table(g)
points(x[g=="Males"],y[g=="Males"],col="blue")
points(x[g=="Females"],y[g=="Females"],col="green")
#######################################################
# Set the working directory
#######################################################
setwd("~/Dropbox/Coursera/Exploratory Data Analysis/Data")
#######################################################
# Read in the data file -
#  use classes and # of records for efficiency
#######################################################
classes=c(Date ="character",
Time ="character",
Global_active_power = "numeric",
Global_reactive_power = "numeric",
Voltage = "numeric",
Global_intensity = "numeric",
Sub_metering_1 = "numeric",
Sub_metering_2 = "numeric",
Sub_metering_3 = "numeric")
hpc1 <- read.table("household_power_consumption.txt", header = TRUE,
sep=";", na.strings="?", colClasses = classes, nrows = 2075259)
str(hpc1)
summary(hpc1)
#######################################################
# Convert character dates and times to a single R
# datetime (POSIXct) value, then subset only two dates:
# 2007-02-01 and 2007-02-02
#######################################################
hpc1$r_datetime = as.POSIXct(paste(hpc1$Date, hpc1$Time), format="%d/%m/%Y %H:%M:%S")
hpc = subset(hpc1, Date == "1/2/2007" | Date == "2/2/2007")
#######################################################
# Create the fourth plot (plot4.png)
#######################################################
setwd("~/Documents/ExData_Plotting1/plot files")
png(filename = "plot4.png", width = 480, height = 480)
par(mfrow=c(2,2))
# plot(1,1) = plot #2 but no "(kilowatts)" in y-axis label
plot(hpc$r_datetime, hpc$Global_active_power, xlab=NA, ylab="Global Active Power",
type="o", pch=NA)
# plot(1,2) = similar to plot #2 but voltage vs datetime and
#             x-axis label = "datetime"
plot(hpc$r_datetime, hpc$Voltage, xlab="datetime", ylab="Voltage",
type="o", pch=NA)
# plot(2,1) = plot #3 but no box around the legend
with(hpc, plot(r_datetime, Sub_metering_1, xlab=NA, ylab="Energy sub metering",
type="o", pch=NA))
with(hpc,lines(r_datetime, Sub_metering_2, col="red", pch=NA))
with(hpc,lines(r_datetime, Sub_metering_3, col="blue", pch=NA))
legend("topright", lty=c(1,1,1), lwd=c(1,1,1), col = c("black","blue","red"),
legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"),
bty="n")
# plot(2,2) = similar to plot #2 but Global_reactive_power vs datetime and
#             x-axis label = "datetime"
plot(hpc$r_datetime, hpc$Global_reactive_power, xlab="datetime",
ylab="Global_reactive_power", type="o", pch=NA)
dev.off()
